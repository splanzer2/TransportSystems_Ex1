load("01Data\smideBookingData.RData")
load("01Data/smideBookingData.RData")
load("01_Data/smideBookingData.RData")
smide_data=load("01_Data/smideBookingData.RData")
show(smide_data)
load("01_Data/smideBookingData.RData")
show(smideBookingData)
str(your_dataset)
str(smideBookingData)
head(smideBookingData)
str(your_dataset)
str(smideBookingData)
head(smideBookingData)
library(lubridate)
smideBookingData$startdat <- ymd_hms(smideBookingData$startdat)
smideBookingData$enddate  <- ymd_hms(smideBookingData$enddate)
min(smideBookingData$startdat, na.rm = TRUE)
max(smideBookingData$enddate, na.rm = TRUE)
load("01_Data/smideBookingData.RData")
min(smideBookingData$startdat, na.rm = TRUE)
max(smideBookingData$enddate, na.rm = TRUE)
smide_start=min(smideBookingData$startdat, na.rm = TRUE)
smide_end=max(smideBookingData$enddate, na.rm = TRUE)
print("The time period of the recorded trips ranges from",smide_start, "to",smide_end,".")
cat("The time period of the recorded trips ranges from", smide_start, "to", smide_end, "\n")
smide_start
cat("The time period of the recorded trips ranges from",
as.character(smide_start), "to", as.character(smide_end), "\n")
# mean trip duration and distance
smide_trip_duration_mean=mean(smideBookingData$tripDMIN)
smide_trip_duration_mean
smide_trip_distance_mean=mean(smideBookingData$tripDKM)
smide_trip_distance_mean=mean(smideBookingData$tripDKM)
smide_trip_duration_sd=sd(smideBookingData$tripDMIN)
smide_trip_distance_sd=sd(smideBookingData$tripDKM)
cat("The mean trip duration of the recorded trips is",
round(smide_trip_duration_mean,2), "minutes and the standard deviation is", round(smide_trip_duration_sd,2), "\n")
cat("The mean trip duration of the recorded trips is",
round(smide_trip_duration_mean,2), "minutes and the standard deviation is", round(smide_trip_duration_sd,2), "minutes.")
cat("The mean trip duration of the recorded trips is",
round(smide_trip_duration_mean,2), "minutes and the standard deviation is", round(smide_trip_duration_sd,2), "minutes.")
cat("The mean trip distance of the recorded trips is",
round(smide_trip_distance_mean,2), "km and the standard deviation is", round(smide_trip_distance_sd,2), "km.")
smideBookingData %>%
count(userID) %>%
summarise(mean_user = mean(n), sd_user = sd(n))
library(dplyr)
smideBookingData %>%
count(userID) %>%
summarise(mean_user = mean(n), sd_user = sd(n))
smideBookingData %>%
count(bikeID) %>%
summarise(mean_bike = mean(n), sd_bike = sd(n))
mean_daily_bookings <- smideBookingData %>%
group_by(startdat, dOfWeek) %>%        # trips per day of week
summarise(daily_bookings = n(), .groups = "drop") %>%
group_by(dOfWeek) %>%                  # average across all Mondays, Tuesdays, etc.
summarise(mean_bookings = mean(daily_bookings))
mean_daily_bookings <- smideBookingData %>%
group_by(startdat, dOfWeek) %>%        # trips per day of week
summarise(daily_bookings = n(), .groups = "drop") %>%
group_by(dOfWeek) %>%                  # average across all Mondays, Tuesdays, etc.
summarise(mean_bookings = mean(daily_bookings))
mean_daily_bookings <- smideBookingData %>%
group_by(startdat, dOfWeek) %>%        # trips per day of week
summarise(daily_bookings = n(), .groups = "drop") %>%
group_by(dOfWeek) %>%                  # average across all Mondays, Tuesdays, etc.
summarise(mean_bookings = mean(daily_bookings))
library(ggplot2)
ggplot(mean_daily_bookings, aes(x = dOfWeek, y = mean_bookings)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Day of the Week",
y = "Mean Number of Daily Bookings",
title = "Average Daily Bike Bookings by Day of the Week") +
theme_minimal()
mean_daily_bookings
mean_hourly_bookings <- smideBookingData %>%
group_by(startdat, hOfDay) %>%
summarise(hourly_bookings = n(), .groups = "drop") %>%
group_by(hOfDay) %>%
summarise(mean_bookings = mean(hourly_bookings))
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "darkred") +
labs(x = "Hour of the Day",
y = "Mean Number of Bookings",
title = "Average Hourly Bike Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1)  +
labs(x = "Hour of the Day",
y = "Mean Number of Bookings",
title = "Average Hourly Bike Bookings") +
theme_minimal()
ggplot(mean_hourly, aes(x = hOfDay, y = mean_bookings)) +
geom_line() +
scale_x_continuous(breaks = 0:23, limits = c(0, 23), minor_breaks = NULL) +
labs(x = "Hour of the day", y = "Mean number of bookings",
title = "Average Hourly Bike Bookings") +
theme_minimal()
mean_hourly <- smideBookingData %>%
count(startdat, hOfDay, name = "bookings") %>%
group_by(startdat) %>%
complete(hOfDay = 0:23, fill = list(bookings = 0)) %>%
ungroup() %>%
group_by(hOfDay) %>%
summarise(mean_bookings = mean(bookings), .groups = "drop")
mean_hourly_bookings <- smideBookingData %>%
group_by(startdat, hOfDay) %>%
summarise(hourly_bookings = n(), .groups = "drop") %>%
group_by(hOfDay) %>%
summarise(mean_bookings = mean(hourly_bookings))
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1)  +
labs(x = "Hour of the Day",
y = "Mean Number of Bookings",
title = "Average Hourly Bike Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings",
title = "Average Hourly Bike Bookings") +
theme_minimal()
mean_daily_bookings <- smideBookingData %>%
group_by(startdat, dOfWeek) %>%        # trips per day of week
summarise(daily_bookings = n(), .groups = "drop") %>%
group_by(dOfWeek) %>%                  # average across all Mondays, Tuesdays, etc.
summarise(mean_bookings = mean(daily_bookings))
mean_daily_bookings
ggplot(mean_daily_bookings, aes(x = dOfWeek, y = mean_bookings)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Day of the Week",
y = "Mean Number of Daily Bookings") +
theme_minimal()
mean_hourly_bookings <- smideBookingData %>%
group_by(startdat, hOfDay) %>%
summarise(hourly_bookings = n(), .groups = "drop") %>%
group_by(hOfDay) %>%
summarise(mean_bookings = mean(hourly_bookings))
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
ggplot(mean_hourly_bookings, aes(x = hOfDay, y = mean_bookings)) +
geom_line(color = "steelblue", size = 1) +
scale_x_continuous(breaks = 0:23) +   # ðŸ‘ˆ show every hour tick
labs(x = "Hour of the Day",
y = "Mean Number of Bookings") +
theme_minimal()
